{
  "basePath": "/ga4gh/wes/v1",
  "swagger": "2.0",
  "info": {
    "title": "Workflow Execution Service",
    "version": "0.3.0"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/service-info": {
      "get": {
        "summary": "Get information about Workflow Execution Service.",
        "description": "May include information related (but not limited to) the workflow descriptor formats, versions supported, the WES API versions supported, and information about general the service availability.\nx-swagger-router-controller: ga4gh.wes.server",
        "operationId": "GetServiceInfo",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ServiceInfo"
            }
          },
          "400": {
            "description": "The request is malformed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "The request is unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The requester is not authorized to perform this action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    },
    "/runs": {
      "get": {
        "summary": "List the workflow runs.",
        "description": "This should be provided in a stable\nordering, however the ordering of this list is implementation\ndependent.  When paging through the list, the client should\nnot make assumptions about live updates, but should assume the\ncontents of the list reflect the workflow list at the moment\nthat the first page is requested.  To monitor a specific\nworkflow run, use GetRunStatus or GetRunLog.",
        "x-swagger-router-controller": "ga4gh.wes.server",
        "operationId": "ListRuns",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RunListResponse"
            }
          },
          "400": {
            "description": "The request is malformed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "The request is unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The requester is not authorized to perform this action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "page_size",
            "description": "OPTIONAL\nThe preferred number of workflow runs to return in a page.\nIf not provided, the implementation should use a default page size.\nThe implementation must not return more items\nthan \"page_size\", but it may return fewer.  Clients should\nnot assume that if fewer than \"page_size\" items is\nreturned that all items have been returned.  The\navailability of additional pages is indicated by the value\nof \"next_page_token\" in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page_token",
            "description": "OPTIONAL\nToken to use to indicate where to start getting results. If unspecified, return the first\npage of results.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      },
      "post": {
        "summary": "Run a workflow.",
        "description": "This endpoint creates a new workflow run and\nreturns the workflow ID to monitor its progress.\n\nThe request may upload files that are required to execute the\nworkflow identified as `workflow_attachment`.  The parts\nsupplied in `workflow_attachment` may include the primary\nworkflow, tools imported by the workflow, other files\nreferenced by the workflow, or files which are part of the\ninput.  The implementation should stage these files to a\ntemporary directory and execute the workflow from there.\nThese parts must have a Content-Disposition header with a\n\"filename\" provided for each part.  Filenames may include\nsubdirectories, but must not include references to parent\ndirectories with '..', implementations should guard against\nmaliciously constructed filenames.\n\nThe `workflow_url` is either an absolute URL to a workflow\nfile that is accessible by the WES endpoint, or a relative URL\ncorresponding to one of the files attached using\n`workflow_attachment`.\n\nThe `workflow_params` JSON object specifies input parameters,\nsuch as input files.  The exact format of the JSON object\ndepends on the conventions of the workflow language being\nused.  Input files should either be absolute URLs, or relative\nURLs corresponding to files uploaded using\n`workflow_attachment`.  The WES endpoint must understand and\nbe able to access URLs supplied in the input.  This is\nimplementation specific.\n\nSee documentation for WorkflowRequest for detail about other\nfields.",
        "x-swagger-router-controller": "ga4gh.wes.server",
        "operationId": "RunWorkflow",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RunId"
            }
          },
          "400": {
            "description": "The request is malformed.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "The request is unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The requester is not authorized to perform this action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "workflow_params",
            "type": "string",
            "format": "application/json"
          },
          {
            "in": "formData",
            "name": "workflow_type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "workflow_type_version",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "tags",
            "type": "string",
            "format": "application/json"
          },
          {
            "in": "formData",
            "name": "workflow_engine_parameters",
            "type": "string",
            "format": "application/json"
          },
          {
            "in": "formData",
            "name": "workflow_url",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "workflow_attachment",
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    },
    "/runs/{run_id}": {
      "get": {
        "summary": "Get detailed info about a workflow run.",
        "x-swagger-router-controller": "ga4gh.wes.server",
        "operationId": "GetRunLog",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RunLog"
            }
          },
          "401": {
            "description": "The request is unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The requester is not authorized to perform this action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The requested workflow run not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      },
      "delete": {
        "summary": "Cancel a running workflow.",
        "x-swagger-router-controller": "ga4gh.wes.server",
        "operationId": "CancelRun",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RunId"
            }
          },
          "401": {
            "description": "The request is unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The requester is not authorized to perform this action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The requested workflow run wasn't found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    },
    "/runs/{run_id}/status": {
      "get": {
        "summary": "Get quick status info about a workflow run.",
        "x-swagger-router-controller": "ga4gh.wes.server",
        "operationId": "GetRunStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RunStatus"
            }
          },
          "401": {
            "description": "The request is unauthorized.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The requester is not authorized to perform this action.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The requested workflow run wasn't found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WorkflowExecutionService"
        ]
      }
    }
  },
  "definitions": {
    "DefaultWorkflowEngineParameter": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Describes the type of the parameter, e.g. float."
        },
        "default_value": {
          "type": "string",
          "description": "The stringified version of the default parameter. e.g. \"2.45\"."
        }
      },
      "description": "A message that allows one to describe default parameters for a workflow\nengine."
    },
    "Log": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The task or workflow name"
        },
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The command line that was executed"
        },
        "start_time": {
          "type": "string",
          "title": "When the command started executing, in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\""
        },
        "end_time": {
          "type": "string",
          "title": "When the command stopped executing (completed, failed, or cancelled), in ISO 8601 format \"%Y-%m-%dT%H:%M:%SZ\""
        },
        "stdout": {
          "type": "string",
          "title": "A URL to retrieve standard output logs of the workflow run or\ntask.  This URL may change between status requests, or may\nnot be available until the task or workflow has finished\nexecution.  Should be available using the same credentials\nused to access the WES endpoint."
        },
        "stderr": {
          "type": "string",
          "title": "A URL to retrieve standard error logs of the workflow run or\ntask.  This URL may change between status requests, or may\nnot be available until the task or workflow has finished\nexecution.  Should be available using the same credentials\nused to access the WES endpoint."
        },
        "exit_code": {
          "type": "integer",
          "format": "int32",
          "title": "Exit code of the program"
        }
      },
      "title": "Log and other info"
    },
    "ServiceInfo": {
      "type": "object",
      "properties": {
        "workflow_type_versions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/WorkflowTypeVersion"
          },
          "title": "A map with keys as the workflow format type name (currently only CWL and WDL are used\nalthough a service may support others) and value is a workflow_type_version object which\nsimply contains an array of one or more version strings"
        },
        "supported_wes_versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The version(s) of the WES schema supported by this service"
        },
        "supported_filesystem_protocols": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The filesystem protocols supported by this service, currently these may include common\nprotocols such as 'http', 'https', 'sftp', 's3', 'gs', 'file', 'synapse', or others as\nsupported by this service."
        },
        "workflow_engine_versions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The engine(s) used by this WES service, key is engine name e.g. Cromwell and value is version"
        },
        "default_workflow_engine_parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefaultWorkflowEngineParameter"
          },
          "description": "Each workflow engine can present additional parameters that can be sent to the\nworkflow engine. This message will list the default values, and their types for each\nworkflow engine."
        },
        "system_state_counts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "description": "The system statistics, key is the statistic, value is the count of runs in that state.\nSee the State enum for the possible keys."
        },
        "auth_instructions_url": {
          "type": "string",
          "description": "A web page URL with information about how to get an\nauthorization token necessary to use a specific endpoint."
        },
        "contact_info": {
          "type": "string",
          "description": "An email address or web page URL with contact information\nfor the operator of a specific WES endpoint.  Users of the\nendpoint should use this to report problems or security\nvulnerabilities."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "A key-value map of arbitrary, extended metadata outside the scope of the above but useful\nto report back"
        }
      },
      "description": "A message containing useful information about the running service, including supported versions and\ndefault settings."
    },
    "State": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "QUEUED",
        "INITIALIZING",
        "RUNNING",
        "PAUSED",
        "COMPLETE",
        "EXECUTOR_ERROR",
        "SYSTEM_ERROR",
        "CANCELED"
      ],
      "default": "UNKNOWN",
      "description": "- UNKNOWN: The state of the task is unknown.\n\nThis provides a safe default for messages where this field is missing,\nfor example, so that a missing field does not accidentally imply that\nthe state is QUEUED.\n - QUEUED: The task is queued.\n - INITIALIZING: The task has been assigned to a worker and is currently preparing to run.\nFor example, the worker may be turning on, downloading input files, etc.\n - RUNNING: The task is running. Input files are downloaded and the first Executor\nhas been started.\n - PAUSED: The task is paused.\n\nAn implementation may have the ability to pause a task, but this is not required.\n - COMPLETE: The task has completed running. Executors have exited without error\nand output files have been successfully uploaded.\n - EXECUTOR_ERROR: The task encountered an error in one of the Executor processes. Generally,\nthis means that an Executor exited with a non-zero exit code.\n - SYSTEM_ERROR: The task was stopped due to a system error, but not from an Executor,\nfor example an upload failed due to network issues, the worker's ran out\nof disk space, etc.\n - CANCELED: The task was canceled by the user.",
      "title": "Enumeration of states for a given run request"
    },
    "RunListResponse": {
      "type": "object",
      "properties": {
        "runs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunStatus"
          },
          "description": "A list of workflow runs that the service has executed or is executing."
        },
        "next_page_token": {
          "type": "string",
          "description": "A token which may be supplied as \"page_token\" in workflow run list request to get the next page\nof results.  An empty string indicates there are no more items to return."
        }
      },
      "description": "The service will return a RunListResponse when receiving a successful RunListRequest."
    },
    "RunLog": {
      "type": "object",
      "properties": {
        "run_id": {
          "type": "string",
          "title": "workflow run ID"
        },
        "request": {
          "$ref": "#/definitions/RunRequest",
          "description": "The original request message used to initiate this execution."
        },
        "state": {
          "$ref": "#/definitions/State",
          "title": "state"
        },
        "run_log": {
          "$ref": "#/definitions/Log",
          "title": "the logs, and other key info like timing and exit code, for the overall run of this workflow"
        },
        "task_logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Log"
          },
          "title": "the logs, and other key info like timing and exit code, for each step in the workflow run"
        },
        "outputs": {
          "$ref": "#/definitions/WesObject",
          "title": "the outputs"
        }
      }
    },
    "RunRequest": {
      "type": "object",
      "properties": {
        "workflow_params": {
          "$ref": "#/definitions/WesObject",
          "description": "REQUIRED\nThe workflow run parameterization document (typically a JSON file), includes all parameterizations for the run\nincluding input and output file locations."
        },
        "workflow_type": {
          "type": "string",
          "title": "REQUIRED\nThe workflow descriptor type, must be \"CWL\" or \"WDL\" currently (or another alternative supported by this WES instance)"
        },
        "workflow_type_version": {
          "type": "string",
          "title": "REQUIRED\nThe workflow descriptor type version, must be one supported by this WES instance"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "OPTIONAL\nA key-value map of arbitrary metadata outside the scope of the run_params but useful to track with this run request"
        },
        "workflow_engine_parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "OPTIONAL\nAdditional parameters can be sent to the workflow engine using this field. Default values\nfor these parameters are provided at the ServiceInfo endpoint."
        },
        "workflow_url": {
          "type": "string",
          "description": "REQUIRED\nThe workflow CWL or WDL document.\nWhen workflow attachments files are provided, the `workflow_url` may be a relative path\ncorresponding to one of the attachments."
        }
      },
      "description": "To execute a workflow, send a run request including all the details needed to begin downloading\nand executing a given workflow."
    },
    "RunId": {
      "type": "object",
      "properties": {
        "run_id": {
          "type": "string",
          "title": "workflow run ID"
        }
      }
    },
    "RunStatus": {
      "type": "object",
      "required": [
        "run_id"
      ],
      "properties": {
        "run_id": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/State"
        }
      },
      "description": "Small description of a workflow run, returned by server during listing"
    },
    "WorkflowTypeVersion": {
      "type": "object",
      "properties": {
        "workflow_type_version": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "an array of one or more acceptable types for the Workflow Type. For\nexample, to send a base64 encoded WDL gzip, one could would offer\n\"base64_wdl1.0_gzip\". By setting this value, and the path of the main WDL\nto be executed in the workflow_url to \"main.wdl\" in the RunRequest."
        }
      },
      "description": "Available workflow types supported by a given instance of the service."
    },
    "WesObject": {
      "type": "object",
      "additionalProperties": true,
      "description": "An arbitrary structured object."
    },
    "ErrorResponse": {
      "description": "An object that can optionally include information about the error.",
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "description": "A detailed error message."
        },
        "status_code": {
          "type": "integer",
          "description": "The integer representing the HTTP status code (e.g. 200, 404)."
        }
      }
    }
  }
}
